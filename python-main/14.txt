# Import required modules/packages/library
import pexpect
import re
# Create the list of routes
routes_list = []
# Connect to the device
print('--- connecting telnet 192.168.56.101 with prne/cisco123!')
session = pexpect.spawn('telnet 192.168.56.101', encoding='utf-8',
 timeout=20)
result = session.expect(['Username:', pexpect.TIMEOUT, pexpect.EOF])
# Check for failure
if result != 0:
 print('Timout or unexpected reply from device')
 exit()
# Login with username
session.sendline('prne')
result = session.expect('Password:')
# Send password
session.sendline('cisco123!')
result = session.expect('>')
# Must set terminal length to zero for long replies
print('--- setting terminal length to 0')
session.sendline('terminal length 0')
result = session.expect('>')
# Execute the 'show ip route' command to get routing info
print('--- executing: show ip route')
session.sendline('show ip route')
result = session.expect('>')
# Get output from ip route command
print('--- getting ip route command output')
show_ip_route_output = session.before
# Display routing information
print('')
print('IP route output')
print('----------------------------------------------------')
print(session.before)
print('----------------------------------------------------')
print('')
# Get routing information into list
routes_list = show_ip_route_output.splitlines()
# Loop forever, until user terminates program
while True:
 # Request user input the IP destination route prefix for searching
 try:
 ip_address = input('Enter IP destination address to find (Ctrl-C to exit): ')
 except KeyboardInterrupt:
 break
# Set the pattern for matching OSPF routes
 route_pattern = re.compile(r'O.\D+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})')
 # Loop through our devices looking for a match on IP address
 for route in routes_list:
 # Search for our route string,
 # and continue to next iteration if not found
 route_match = route_pattern.search(route)
 if not route_match:
 continue
 # Found our IP address, display route information
 if route_match.group(1) == ip_address:
 route_info = route.split(',')
 print(' ---- Route: ', route_info[0][5:].strip())
 print(' ---- Time: ', route_info[1].strip())
 print(' ---- Interface: ', route_info[2].strip())
 print('')
 break
 else: # We get here if we exhausted the device list, IP not found
 print('--- Given route prefix not found ---')
# Display a blank line to make easier to read
print('')
print('Route search terminated.\n')
# Close the session
session.sendline('quit')
session.kill(0)
